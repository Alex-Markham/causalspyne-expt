rule all:
    input:
        "results/boxplot_shd.pdf",
        "results/boxplot_acc.pdf",


pattern_dataset = (
    "method={method}/graph_size={graph_size}/seed={seed}/samp_size={samp_size}/"
)


rule generate_data:
    output:
        dataset=f"results/datasets/{pattern_dataset}data.csv",
        dag=f"results/datasets/{pattern_dataset}ground_truth_dag.csv",
        dag_pkl=f"results/datasets/{pattern_dataset}ground_truth_dag.pkl",
        hidden_nodes=f"results/datasets/{pattern_dataset}hidden_nodes.csv",
        node_names=f"results/datasets/{pattern_dataset}node_names.pkl",
    script:
        "scripts/generate_data.py"


rule fit_fci:
    input:
        dataset=rules.generate_data.output.dataset,
    output:
        pag=f"results/est/alg=fci/{pattern_dataset}pag.csv",
        causal_order=f"results/est/alg=fci/{pattern_dataset}causal_order.csv",
    script:
        "scripts/fit_fci.py"


rule fit_linlam:
    input:
        dataset=rules.generate_data.output.dataset,
        node_names=rules.generate_data.output.node_names,
    output:
        graph=f"results/est/alg=linlam/{pattern_dataset}graph.csv",
        causal_order=f"results/est/alg=linlam/{pattern_dataset}causal_order.csv",
    script:
        "scripts/fit_linlam.py"


rule fit_parcelingam:
    input:
        dataset=rules.generate_data.output.dataset,
    output:
        pag=f"results/est/alg=parcelingam/{pattern_dataset}pag.csv",
        causal_order=f"results/est/alg=parcelingam/{pattern_dataset}causal_order.csv",
    script:
        "scripts/fit_parcelingam.py"


rule evaluate_shd:
    input:
        true_dag=rules.generate_data.output.dag,
        hidden_nodes=rules.generate_data.output.hidden_nodes,
        est_pag=f"results/est/alg={{alg}}/{pattern_dataset}pag.csv",
    output:
        shd=f"results/eval/alg={{alg}}/{pattern_dataset}shd.csv",
    script:
        "scripts/eval_shd.py"


rule evaluate_anc_acc:
    input:
        true_dag=rules.generate_data.output.dag_pkl,
        hidden_nodes=rules.generate_data.output.hidden_nodes,
        pred_order=f"results/est/alg={{alg}}/{pattern_dataset}causal_order.csv",
    output:
        anc_acc=f"results/eval/alg={{alg}}/{pattern_dataset}anc_acc.csv",
    script:
        "scripts/eval_anc_acc.py"


from itertools import chain


rule boxplot_shd_csv:
    input:
        expand(
            rules.evaluate_shd.output.shd,
            alg=["fci", "parcelingam"],
            method=["standard", "child"],
            graph_size=["small", "medium"],
            seed=chain(range(20), range(21,30)),
            samp_size=[1000],
        ),
    output:
        csv="results/shd.csv",
    script:
        "scripts/join_csv.py"


rule boxplot_shd:
    input:
        csv=rules.boxplot_shd_csv.output.csv,
    output:
        "results/boxplot_shd.pdf",
    script:
        "scripts/boxplot_shd.py"


rule boxplot_acc_csv:
    input:
        expand(
            rules.evaluate_anc_acc.output.anc_acc,
            alg=["fci", "linlam", "parcelingam"],
            method=["standard", "child"],
            graph_size=["small", "medium"],
            seed=chain(range(20), range(21,30)),
            samp_size=[1000],
        ),
    output:
        csv="results/acc.csv",
    script:
        "scripts/join_csv.py"


rule boxplot_acc:
    input:
        csv=rules.boxplot_acc_csv.output.csv,
    output:
        "results/boxplot_acc.pdf",
    script:
        "scripts/boxplot_acc.py"
